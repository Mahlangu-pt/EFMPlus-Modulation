/* Includes */
#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_usart.h"
#include<string.h>
#include "Tables.h"
#include "Encoder.h"
#include "Decoder.h"
#include "Conv_Encoder.h"
#include <stdlib.h>


/* Private macro */

/* Private variables */
char rx_data[5];
char buffer[6];
char buffer2[4];
char *eptr;
uint16_t temp1;
int temp2[16];
int temp3[16];
int temp4[16];
int table;
int state;
int Out_Data;
uint16_t EFM_Encoder1_Data;
uint16_t TO_Decoder[2];
int to_conv;
uint16_t Conv_data[16];
/* Private functions */
void GPIO_Configuration(void);
void USART_Config(void);
void USART_PutChar(char c);
void To_String(char* _buffer, unsigned int data);
void To_String2(char* _buffer, unsigned int data);
void To_Binary(int n, int binaryN[]);
/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
	// LED configuration
 	GPIO_Configuration();
    // Call USART1 configuration
    USART_Config();

	int j=0,i=0,k=0;

 	while(1)
 	{
// 		//************ UART Receiver**********************
 		for(j =0;j< sizeof(rx_data);++j)
 		{
 		   while (!USART_GetFlagStatus(USART1, USART_FLAG_RXNE));  // Wait till something is received
 		   rx_data[j] = USART_ReceiveData(USART1);                 // Read received char
 		   GPIO_SetBits(GPIOG, GPIO_Pin_13);
 		}

 		// String/ASCII TO int converting

 		temp1 = strtol(rx_data, &eptr, 10);  // 10->decimal / 16-> Hex / 2-> Binary

 		//************* EFMPlus Encoder 1******************
 		EFM_Encoder1_Data= Encoder(temp1);

 		// Int to Binary array
 		To_Binary(EFM_Encoder1_Data,temp2);

 		//************* Conv Encoder***********************
 		for(j =0;j<16;++j)
 		{
 			to_conv =temp2[j];
 			Conv_data[j] = Conv_Encoder(to_conv);
 		}

 		//************* EFMPlus Encoder 2********************

 		//************* Bipolar Encoder (NRZI) ********************

 		// Integer  TO String/ASCII converting
 		To_String(buffer, EFM_Encoder1_Data);

 //**===================================================================================================================
//           CHANNEL            CHANNEL              CHANNEL              CHANNEL              CHANNEL
 //**===================================================================================================================

 		//**************EFMPlus Decoder 2**********************
 		//TO_Decoder[2] = {0x4480,0x2120};

 		TO_Decoder[0] =EFM_Encoder1_Data;
 		// Int to Binary array
 		if(i>=1)
 		{
				To_Binary(TO_Decoder[0],temp3);
				To_Binary(TO_Decoder[1],temp4);

				state = State_Detector(temp4) ;   // check InputData[t] -next    input "binary"
				table = Table_Detector(temp4,temp3) ;   // check InputData[t] and [t+1]
				Out_Data = EFM_Decoder(state, table, TO_Decoder[1]);
				++k;
				//************* UART Transmitter********
				To_String(buffer, Out_Data);

				USART_PutString(buffer);


 		}//END IF

  		i=i+1;
 		TO_Decoder[1] =TO_Decoder[0];
 	} // END OF WHILE


}// END OF MAIN




/**===========================================================================
           FUNCTIONS
/*********************************************************************************/

void GPIO_Configuration(void)
{    // Enable clock for GPIOD (for orange LED)
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    // Initialization of GPIOD (for orange LED)
    GPIO_InitTypeDef GPIO_InitDef;
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_13;
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
    GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOG, &GPIO_InitDef);
}

/**************************************************************************************/
void USART_Config(void)
{
	// Enable clock for GPIOA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	// Enable clock for USART1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
	// Connect PA9 to USART1_Tx
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
	// Connect PA10 to USART1_Rx
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
	// Initialization of GPIOA
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
	// Initialization of USART1
	USART_InitTypeDef USART_InitStruct;
	USART_InitStruct.USART_BaudRate = 9600;
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_InitStruct.USART_Parity = USART_Parity_No;
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART1, &USART_InitStruct);
	//USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable IRQ on RX
	//NVIC_EnableIRQ(USART1_IRQn);   // Enable IRQ for USART1 in NVIC
	// Enable USART1
	USART_Cmd(USART1, ENABLE);
}
/**************************************************************************************/
void USART1_IRQHandler(void)
{
 		char var;
 	    while (!USART_GetFlagStatus(USART1, USART_FLAG_RXNE));
 	    // Read received char
 	    var =  USART_ReceiveData(USART1);
 	    if(var == 't')
 	    {
 		  GPIO_SetBits(GPIOG, GPIO_Pin_13);
 		 USART_PutString("ON");
 	     }

}

/**************************************************************************************/
void USART_PutChar(char c)
{
    // Wait until transmit data register is empty
    while (!USART_GetFlagStatus(USART1, USART_FLAG_TXE));
    // Send a char using USART1
    USART_SendData(USART1, c);
}
/**************************************************************************************/
void USART_PutString(char *s)
{
    // Send a string
    while (*s)
    {
        USART_PutChar(*s++);
    }
}
/**************************************************************************************/
uint16_t USART_GetChar()
{
    // Wait until data is received
    while (!USART_GetFlagStatus(USART1, USART_FLAG_RXNE));
    // Read received char
    return USART_ReceiveData(USART1);
}
/**************************************************************************************/

void To_String(char* _buffer, unsigned int data)
{
  // we make our string assuming all hex digits are 0 to 9
  // string will be of the form 0xabcd
  // where a,b,c,d are the individual hex digits
  _buffer[0] = '0';
  _buffer[1] = 'x';
  _buffer[2] = ( (data>>12) & 0x0F) + '0';
  _buffer[3] = ( (data>>8)  & 0x0F) + '0';
  _buffer[4] = ( (data>>4)  & 0x0F) + '0';
  _buffer[5] = ( (data)     & 0x0F) + '0';
  _buffer[6] = 0;

  // now we correct for the case where a digit
  // is A to F:
  if (_buffer[2] > '9') _buffer[2] += 7;
  if (_buffer[3] > '9') _buffer[3] += 7;
  if (_buffer[4] > '9') _buffer[4] += 7;
  if (_buffer[5] > '9') _buffer[5] += 7;

}

void To_String2(char* _buffer, unsigned int data)
{
  // we make our string assuming all hex digits are 0 to 9
  // string will be of the form 0xabcd
  // where a,b,c,d are the individual hex digits
  _buffer[0] = ( (data>>12) & 0x0F) + '0';
  _buffer[1] = ( (data>>8)  & 0x0F) + '0';
  _buffer[2] = ( (data>>4)  & 0x0F) + '0';
  _buffer[3] = ( (data)     & 0x0F) + '0';
  _buffer[4] = 0;

  // now we correct for the case where a digit
  // is A to F:
  if (_buffer[0] > '9') _buffer[2] += 7;
  if (_buffer[1] > '9') _buffer[3] += 7;
  if (_buffer[2] > '9') _buffer[4] += 7;
  if (_buffer[3] > '9') _buffer[5] += 7;

}



void To_Binary(int n, int binaryNum[] )
{
    // counter for binary array
    int i = 0 ;
    while (n > 0) {
        // storing remainder in binary array
        binaryNum[i] = n % 2;
        n = n / 2;
        i++;
    }
}
